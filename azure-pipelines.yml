# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  - group: VSMarketplace

jobs:
- job: Default
  timeoutInMinutes: 360

  pool:
    vmImage: windows-latest

  variables:
    templatesSolution: 'Source/Templates/CognibaseTemplates.sln'
    templatesBuildConfiguration: 'Release'
    vsixSolution: 'Source/TemplatesVsix/TemplatesVsix.sln'
    vsixBuildConfiguration: 'Release'
    vsixPath: 'Source/TemplatesVsix/CognibaseTemplates/bin/$(buildConfiguration)/CognibaseTemplates.vsix'
    nupkgName: 'Missionware.Cognibase.Templates'
    nupkgOutput: 'Output'
    version.Patch: $[counter(variables['version.MajorMinor'], 3)]
    versionNumber: '$(version.MajorMinor).$(version.Patch)'
    versionNumberWithPrefix: 'CbTemplates_v$(versionNumber)'
    nupkgPathWithVersion: '$(nupkgOutput)/$(nupkgName).$(versionNumber).nupkg'
  
  steps:
  - checkout: self
    persistCredentials: true
    lfs: true

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        if ([string]::IsNullOrWhitespace(${env:VERSION_MAJORMINOR})) { throw "version.MajorMinor variable not set in pipeline variables. Set it to *.* (eg 1.2)" }
        Write-Host "##vso[build.updatebuildnumber]TEMPLATES_v$(versionNumber)_$($env:Build_BuildNumber)"
    displayName: '* Version $(versionNumber) *'

#  - task: NuGetCommand@2
#    inputs:
#      command: 'restore'
#      restoreSolution: $(templatesSolution)
#    displayName: 'Test - Nuget restore templates'

#  - task: VSBuild@1
#    inputs:
#      solution: $(templatesSolution)
#      configuration: $(templatesBuildConfiguration)
#    displayName: 'Test - Build Templates solution'


  - task: CmdLine@2
    inputs:
      script: 'Scripts\vsix_convert_eula_to_rtf.bat'
    displayName: 'Vsix - Copy EULA to VSIX'

  - task: CmdLine@2
    inputs:
      script: 'Scripts\vsix_convert_readme_to_html.bat'
    displayName: 'Vsix - Copy readme to VSIX'

  - task: PowerShell@2
    inputs:
      filePath: 'Scripts\fix-versions.ps1'
      arguments: '$(versionNumber)'
    displayName: 'Vsix - Set versions'

  - task: CmdLine@2
    inputs:
      script: 'Scripts\build_template.bat $(versionNumber)'
    displayName: 'Nupkg - Build template nupkg'

  - task: NuGetCommand@2
    inputs:
      command: 'restore'
      restoreSolution: $(vsixSolution)
    displayName: 'Vsix - Nuget restore solution'

  - task: VSBuild@1
    inputs:
      solution: $(vsixSolution)
      configuration: $(vsixBuildConfiguration)
    displayName: 'Vsix - Build solution'

  - task: NuGetCommand@2
    inputs:
      command: 'push'
      packagesToPush: '$(nupkgPathWithVersion)'
      nuGetFeedType: 'external'
      publishFeedCredentials: 'MwNugetOrg'
      arguments: '--skip-duplicate'
    displayName: 'push to Nuget.org'

  - task: PowerShell@2
    inputs:
      filePath: 'Scripts\publish-vsix.ps1'
      arguments: '$(MarketplacePat)'
    continueOnError: true
    displayName: 'Vsix - Publish to marketplace'